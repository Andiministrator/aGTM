// ssGTM Doku: https://developers.google.com/tag-platform/tag-manager/server-side/api?hl=de
// aGTM Doku: https://github.com/Andiministrator/aGTM
const aGTMversion = "1.4";

// Load Libraries
//const log = require('logToConsole');
const claimRequest = require('claimRequest');
const setResponseStatus = require('setResponseStatus');
const setResponseHeader = require('setResponseHeader');
const setResponseBody = require('setResponseBody');
const returnResponse = require('returnResponse');
const getRequestPath = require('getRequestPath');
const getRequestQueryParameters = require('getRequestQueryParameters');
const fromBase64 = require('fromBase64');
const JSON = require('JSON');

// Check for /aGTM.js Path
if (getRequestPath() !== '/aGTM.js') return;
// Get URL Request Parameters and id
const queryParameters = getRequestQueryParameters();
const id = queryParameters.id || null;
// Return if id is set but not allowed
if (id) {
    let id_allowed = false;
    for (const val of data.ids) {
        if (val.id===id) {
            id_allowed = true;
            break;
        }
    }
    if (!id_allowed) return;
}
// Claim Request
claimRequest();

// Build CMP Code
const cmp = data.cmp ? data.cmp : "";

// Build aGTM Config
const gtm = data.gtm;
const c = {};
// Build gtm object
if (data.gtm) {
    const gtm = {};
    for (const val of data.gtm) {
        if (val.gtm_id) {
            gtm[val.gtm_id] = {};
            if (!val.gtm_consent) gtm[val.gtm_id].noConsent = true;
            if (val.gtm_env) gtm[val.gtm_id].env = val.gtm_env;
            if (val.gtm_url) gtm[val.gtm_id].gtmURL = val.gtm_url;
        }
    }
    c.gtm = gtm;
}
// Add Consent Conditions
if (data.consent) {
    for (const val of data.consent) {
        c[val.consent_type] = val.consent_value;
    }
}
// Add other Consent Options
if (data.sendConsentEvent) c.sendConsentEvent = true;
if (data.useListener) c.useListener = true;
if (data.consent_events) c.consent_events = data.consent_events;
// Other Options
if (data.aPageview) c.aPageview = true;
if (data.vPageview) c.vPageview = true; // deprecated
if (data.vPageviews) c.vPageviews = true;
if (data.dlStateEvents) c.dlStateEvents = true;
if (data.gdl) c.gdl = data.gdl;
if (data.dlOrgPush) c.dlOrgPush = data.dlOrgPush; if (typeof c.dlOrgPush!='string' || c.dlOrgPush=='-') c.dlOrgPush = '';
if (data.nonce) c.nonce = data.nonce;
if (data.debug) c.debug = true;
// Build config string
const config = "aGTM.f.config(" + JSON.stringify(c) + ");";

// aGTM Code
const agtm = fromBase64('');

// Build JS Code for response
var jsCode = agtm + cmp + config + 'aGTM.f.init();';

// Response
setResponseStatus(200);
setResponseHeader(aGTMversion);
setResponseBody(jsCode);
returnResponse();
